# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sq2tzoDHP9Nphf4jdez-xK4oyPj-kPnY
"""

# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/186FZdHHuSWUg45R1rkCoIJKTe4xNeWdI
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Title of the app
st.title("CSV Data Visualization App")

# File uploader for CSV
uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])

if uploaded_file is not None:
    # Read the CSV file
    data = pd.read_csv(uploaded_file)
    st.write("### Data Preview")
    st.dataframe(data)

    # Dropdown for selecting columns
    columns = data.columns.tolist()
    x_column = st.selectbox("Select X-axis column", columns)
    y_column = st.selectbox("Select Y-axis column", columns)

    # Convert the selected x_column to datetime if it contains date strings
    if x_column and data[x_column].dtype == 'object':  # Check if x_column is of object type
        try:
            data[x_column] = pd.to_datetime(data[x_column], format='%m/%d/%Y')  # Adjust format if needed
        except ValueError:
            st.error(f"Could not convert {x_column} to datetime. Please check the format.")

    # Convert the selected y_column to datetime if it contains date strings
    if y_column and data[y_column].dtype == 'object':  # Check if y_column is of object type
        try:
            data[y_column] = pd.to_datetime(data[y_column], format='%m/%d/%Y')  # Adjust format if needed
        except ValueError:
            st.error(f"Could not convert {y_column} to datetime. Please check the format.")

    # Dropdown for graph type
    graph_type = st.selectbox(
        "Select Graph Type",
        ["Line", "Scatter", "Bar"]
    )

    # Plot button
    if st.button("Plot Graph"):
        fig, ax = plt.subplots()

        # Plotting logic
        if graph_type == "Line":
            ax.plot(data[x_column], data[y_column], marker='o')
            ax.set_title(f"{y_column} vs {x_column} (Line Plot)")

        elif graph_type == "Scatter":
            ax.scatter(data[x_column], data[y_column])
            ax.set_title(f"{y_column} vs {x_column} (Scatter Plot)")

        elif graph_type == "Bar":
            ax.bar(data[x_column].astype(str), data[y_column].dt.strftime('%m/%d/%Y'))  # Convert to string for bar labels
            ax.set_title(f"{y_column} vs {x_column} (Bar Chart)")

        # Set labels
        ax.set_xlabel(x_column)
        ax.set_ylabel(y_column)
        plt.xticks(rotation=45)  # Rotate x labels for better readability
        st.pyplot(fig)

    st.write("Tip: Ensure the selected columns are in the correct date format for meaningful plots.")
else:
    st.info("Please upload a CSV file to get started.")