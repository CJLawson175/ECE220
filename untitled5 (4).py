# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U_cG5WssboTxMI8_IyY4cQLW8CZJB-R-
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Title of the app
st.title("CSV Data Visualization App")

# Add a link to your GitHub repository
st.markdown("[Southern United States Air Quality](https://github.com/CJLawson175/ENG220_Group-006.git)")

# File uploader for CSV
uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])

if uploaded_file is not None:
    # Read the CSV file
    data = pd.read_csv(uploaded_file)
    st.write("### Data Preview")
    st.dataframe(data)

    # Check if the necessary columns are present
    if 'Year' in data.columns and 'Month' in data.columns:
        # Create a new 'Date' column combining 'Year' and 'Month'
        data['Date'] = pd.to_datetime(data[['Year', 'Month']].assign(DAY=1))

        # Dropdown for selecting state
        states = data['State'].unique()
        selected_state = st.selectbox("Select State", states)

        # Filter data by selected state
        state_data = data[data['State'] == selected_state]

        # Dropdown for selecting county
        counties = state_data['County'].unique()
        selected_county = st.selectbox("Select County", counties)

        # Filter data by selected county
        filtered_data = state_data[state_data['County'] == selected_county]

        # Dropdown for selecting Y-axis column
        y_column = st.selectbox("Select Y-axis column", ["CO2 (ppm)", "NO2 (ppb)", "Ozone (ppm)", "PM2.5 (ug/m3)", "Monthly AQI Average"])

        # Dropdown for graph type
        graph_type = st.selectbox("Select Graph Type", ["Line", "Scatter", "Bar"])

        # Plot button
        if st.button("Plot Graph"):
            if not filtered_data.empty:
                fig, ax = plt.subplots(figsize=(10, 6))

                # Plotting logic
                if graph_type == "Line":
                    ax.plot(filtered_data['Date'], filtered_data[y_column], marker='o')
                    ax.set_title(f"{y_column} vs Date (Line Plot) for {selected_county}, {selected_state}")

                elif graph_type == "Scatter":
                    ax.scatter(filtered_data['Date'], filtered_data[y_column])
                    ax.set_title(f"{y_column} vs Date (Scatter Plot) for {selected_county}, {selected_state}")

                elif graph_type == "Bar":
                    ax.bar(filtered_data['Date'], filtered_data[y_column])
                    ax.set_title(f"{y_column} vs Date (Bar Chart) for {selected_county}, {selected_state}")

                # Set labels
                ax.set_xlabel("Date")
                ax.set_ylabel(y_column)
                plt.xticks(rotation=45)  # Rotate x labels for better readability
                st.pyplot(fig)
            else:
                st.warning(f"No data available for {selected_county}, {selected_state}.")

        st.write("Tip: Ensure the selected columns are suitable for meaningful plots.")
    else:
        st.error("The CSV file must contain 'Year' and 'Month' columns.")
else:
    st.info("Please upload a CSV file to get started.")